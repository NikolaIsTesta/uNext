// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  TEACHER
}

enum TypeOfQuestion {
  VICTORINA
  TEXTANSWER
}

model PublicFile {
  id   Int    @id @default(autoincrement())
  url  String? @default("https://nestjs-onlyup-public-bucket.s3.amazonaws.com/default.png")
  key  String? @default("default.png")
  User User[]
}

model User {
  id              Int              @id @default(autoincrement())
  name            String
  email           String           @unique
  password        String
  date_registration DateTime      @default(now())
  disciplineInfos DisciplineInfo[]
  Subject         Subject[]
  studentMark     Int?            @default(0)
  role            Role            @default(USER)
  id_avatar       Int             @default(1)
  avatar          PublicFile      @relation(fields: [id_avatar], references: [id])
  UserAnswers     UserAnswer[]
}

model Subject {
  id              Int              @id @default(autoincrement())
  name            String           @unique
  description     String
  id_teacher      Int?
  teacher         User?            @relation(fields: [id_teacher], references: [id])
  disciplineInfos DisciplineInfo[]
  createdAt       DateTime         @default(now())
  storage         String?          @default(".uploads/default.jpg") @db.VarChar(255)
  deadline        DateTime?
  tasks           Task[]
}

model DisciplineInfo {
  id                 Int     @id @default(autoincrement())
  id_subject         Int
  subject            Subject @relation(fields: [id_subject], references: [id])
  id_student         Int
  student            User?   @relation(fields: [id_student], references: [id])
}

model Task {
  id           Int          @id @default(autoincrement())
  description  String
  title        String
  id_subject   Int
  //is_answered Boolean
  subject      Subject      @relation(fields: [id_subject], references: [id])
  totalMark Int? @default(0)
  studentMark Int? @default(0)
  questions    Question[]
  usersAnswers UserAnswer[]
  textAnswer   TextAnswer[]
  option       Option[]
}

model Question {
  id          Int            @id @default(autoincrement())
  title       String
  type        TypeOfQuestion
  id_task     Int
  task        Task           @relation(fields: [id_task], references: [id])
  textAnswers TextAnswer[]
  victorines  Victorina[]
  //TODO удалить
  questionMark Int?
  answerMark   Int?
}

model TextAnswer {
  id          Int          @id @default(autoincrement())
  answer      String
  mark        Int
  userAnswer  String?       
  id_task     Int?
  task        Task?        @relation(fields: [id_task], references: [id])
  id_question Int          @unique
  question    Question     @relation(fields: [id_question], references: [id])
  userAnswers UserAnswer[]
}

model Victorina {
  id          Int      @id @default(autoincrement())
  id_question Int      @unique
  id_task     Int?
  question    Question @relation(fields: [id_question], references: [id])
  options     Option[]
}

model Option {
  id           Int          @id @unique @default(autoincrement())
  text         String
  isCorrect    Boolean
  mark         Int
  id_task      Int?
  task         Task?         @relation(fields: [id_task], references: [id])
  id_victorina Int
  victorina    Victorina    @relation(fields: [id_victorina], references: [id])
  userAnswers  UserAnswer[]
}

model UserAnswer {
  id              Int    @id @default(autoincrement())
  id_student      Int
  id_task         Int?
  id_textAnswer   Int?
  id_optionAnswer Int?
  markForOption    Int?
  userOptionAnswer Boolean?
  userTextAnswer String?
  isCorrect Boolean?
  student User @relation(fields: [id_student], references: [id])
  task Task? @relation(fields: [id_task], references: [id])
  textAnswers TextAnswer? @relation(fields: [id_textAnswer], references: [id])
  optionAnswers Option? @relation(fields: [id_optionAnswer], references: [id])
}